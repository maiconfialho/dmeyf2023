GLOBAL_iteracion <<- GLOBAL_iteracion + 1L
# hago la union de los parametros basicos y los moviles que vienen en x
param_completo <- c(PARAM$lgb_basicos, x)
param_completo$early_stopping_rounds <-
as.integer(400 + 4 / param_completo$learning_rate)
GLOBAL_arbol <<- 0L
GLOBAL_gan_max <<- -Inf
vcant_optima <<- c()
set.seed(PARAM$lgb_semilla, kind = "L'Ecuyer-CMRG")
modelo_train <- lgb.train(
data = dtrain,
valids = list(valid = dvalidate),
eval = fganancia_lgbm_meseta,
param = param_completo,
verbose = -100
)
cat("\n")
cant_corte <- vcant_optima[modelo_train$best_iter]
# aplico el modelo a testing y calculo la ganancia
prediccion <- predict(
modelo_train,
data.matrix(dataset_test[, campos_buenos, with = FALSE])
)
tbl <- copy(dataset_test[, list("gan" = ifelse(clase_ternaria == "BAJA+2",
PARAM$hyperparametertuning$POS_ganancia,
PARAM$hyperparametertuning$NEG_ganancia))])
tbl[, prob := prediccion]
setorder(tbl, -prob)
tbl[, gan_acum := cumsum(gan)]
tbl[, gan_suavizada := frollmean(
x = gan_acum, n = 2001,
align = "center", na.rm = TRUE, hasNA = TRUE
)]
ganancia_test <- tbl[, max(gan_suavizada, na.rm = TRUE)]
cantidad_test_normalizada <- which.max(tbl[, gan_suavizada])
rm(tbl)
gc()
ganancia_test_normalizada <- ganancia_test
# voy grabando las mejores column importance
if (ganancia_test_normalizada > GLOBAL_gananciamax) {
GLOBAL_gananciamax <<- ganancia_test_normalizada
tb_importancia <- as.data.table(lgb.importance(modelo_train))
fwrite(tb_importancia,
file = paste0("impo_", sprintf("%03d", GLOBAL_iteracion), ".txt"),
sep = "\t"
)
rm(tb_importancia)
}
# logueo final
ds <- list("cols" = ncol(dtrain), "rows" = nrow(dtrain))
xx <- c(ds, copy(param_completo))
xx$early_stopping_rounds <- NULL
xx$num_iterations <- modelo_train$best_iter
xx$estimulos <- cantidad_test_normalizada
xx$ganancia <- ganancia_test_normalizada
xx$iteracion_bayesiana <- GLOBAL_iteracion
loguear(xx, arch = "BO_log.txt")
set.seed(PARAM$lgb_semilla, kind = "L'Ecuyer-CMRG")
return(ganancia_test_normalizada)
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
# Aqui se debe poner la carpeta de la computadora local
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
# cargo el dataset donde voy a entrenar el modelo
dataset <- fread(PARAM$input$dataset)
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
dir.create(paste0("./exp/", PARAM$experimento, "/"), showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd(paste0("./exp/", PARAM$experimento, "/"))
# en estos archivos quedan los resultados
kbayesiana <- paste0(PARAM$experimento, ".RDATA")
klog <- paste0(PARAM$experimento, ".txt")
# Catastrophe Analysis  -------------------------------------------------------
# deben ir cosas de este estilo
#   dataset[foto_mes == 202006, active_quarter := NA]
# Data Drifting
# por ahora, no hago nada
# Feature Engineering Historico  ----------------------------------------------
#   aqui deben calcularse los  lags y  lag_delta
#   Sin lags no hay paraiso !  corta la bocha
# ahora SI comienza la optimizacion Bayesiana
GLOBAL_iteracion <- 0 # inicializo la variable global
GLOBAL_gananciamax <- -1 # inicializo la variable global
# si ya existe el archivo log, traigo hasta donde llegue
if (file.exists(klog)) {
tabla_log <- fread(klog)
GLOBAL_iteracion <- nrow(tabla_log)
GLOBAL_gananciamax <- tabla_log[, max(ganancia)]
}
# paso la clase a binaria que tome valores {0,1}  enteros
dataset[, clase01 := ifelse(clase_ternaria == "CONTINUA", 0L, 1L)]
# los campos que se van a utilizar
campos_buenos <- setdiff(
colnames(dataset),
c("clase_ternaria", "clase01", "azar", "training")
)
# defino los datos que forma parte del training
# aqui se hace el undersampling de los CONTINUA
set.seed(PARAM$trainingstrategy$semilla_azar)
dataset[, azar := runif(nrow(dataset))]
dataset[, training := 0L]
dataset[
foto_mes %in% PARAM$input$training &
(azar <= PARAM$trainingstrategy$undersampling | clase_ternaria %in% c("BAJA+1", "BAJA+2")),
training := 1L
]
# dejo los datos en el formato que necesita LightGBM
dtrain <- lgb.Dataset(
data = data.matrix(dataset[training == 1L, campos_buenos, with = FALSE]),
label = dataset[training == 1L, clase01],
weight = dataset[training == 1L,
ifelse(clase_ternaria == "BAJA+2", 1.0000001,
ifelse(clase_ternaria == "BAJA+1", 1.0, 1.0))],
free_raw_data = FALSE
)
# defino los datos que forman parte de validation
#  no hay undersampling
dataset[, validation := 0L]
dataset[ foto_mes %in% PARAM$input$validation,  validation := 1L]
dvalidate <- lgb.Dataset(
data = data.matrix(dataset[validation == 1L, campos_buenos, with = FALSE]),
label = dataset[validation == 1L, clase01],
weight = dataset[validation == 1L,
ifelse(clase_ternaria == "BAJA+2", 1.0000001,
ifelse(clase_ternaria == "BAJA+1", 1.0, 1.0))],
free_raw_data = FALSE
)
# defino los datos de testing
dataset[, testing := 0L]
dataset[ foto_mes %in% PARAM$input$testing,  testing := 1L]
dataset_test <- dataset[testing == 1, ]
# libero espacio
rm(dataset)
gc()
# Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar <- EstimarGanancia_lightgbm # la funcion que voy a maximizar
configureMlr(show.learner.output = FALSE)
# configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
# por favor, no desesperarse por lo complejo
obj.fun <- makeSingleObjectiveFunction(
fn = funcion_optimizar, # la funcion que voy a maximizar
minimize = FALSE, # estoy Maximizando la ganancia
noisy = TRUE,
par.set = PARAM$bo_lgb, # definido al comienzo del programa
has.simple.signature = FALSE # paso los parametros en una lista
)
# cada 600 segundos guardo el resultado intermedio
ctrl <- makeMBOControl(
save.on.disk.at.time = 600, # se graba cada 600 segundos
save.file.path = kbayesiana
) # se graba cada 600 segundos
# indico la cantidad de iteraciones que va a tener la Bayesian Optimization
ctrl <- setMBOControlTermination(
ctrl,
iters = PARAM$bo_iteraciones
) # cantidad de iteraciones
# defino el mÃ©todo estandar para la creacion de los puntos iniciales,
# los "No Inteligentes"
ctrl <- setMBOControlInfill(ctrl, crit = makeMBOInfillCritEI())
# establezco la funcion que busca el maximo
surr.km <- makeLearner(
"regr.km",
predict.type = "se",
covtype = "matern3_2",
control = list(trace = TRUE)
)
# inicio la optimizacion bayesiana
if (!file.exists(kbayesiana)) {
run <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else {
run <- mboContinue(kbayesiana) # retomo en caso que ya exista
}
cat("\n\nLa optimizacion Bayesiana ha terminado\n")
# para correr el Google Cloud
#   8 vCPU
#  64 GB memoria RAM
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("lightgbm")
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "KA8240_lag3"
PARAM$input$dataset <- "./datasets/competencia_02.csv.gz"
# meses donde se entrena el modelo
#PARAM$input$training <- c(202012, 202101, 202102, 202103, 202104, 202105)
PARAM$input$training <- c(202010, 202011, 202012, 202101, 202102, 202103)
PARAM$input$future <- c(202107) # meses donde se aplica el modelo
PARAM$finalmodel$semilla <- 100005
# hiperparametros intencionalmente NO optimos
PARAM$finalmodel$optim$num_iterations <- 43
PARAM$finalmodel$optim$learning_rate <- 0.0256516833785425
PARAM$finalmodel$optim$feature_fraction <- 0.816242644574755
PARAM$finalmodel$optim$min_data_in_leaf <- 31379
PARAM$finalmodel$optim$num_leaves <- 433
# Hiperparametros FIJOS de  lightgbm
PARAM$finalmodel$lgb_basicos <- list(
boosting = "gbdt", # puede ir  dart  , ni pruebe random_forest
objective = "binary",
metric = "custom",
first_metric_only = TRUE,
boost_from_average = TRUE,
feature_pre_filter = FALSE,
force_row_wise = TRUE, # para reducir warnings
verbosity = -100,
max_depth = -1L, # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split = 0.0, # min_gain_to_split >= 0.0
min_sum_hessian_in_leaf = 0.001, #  min_sum_hessian_in_leaf >= 0.0
lambda_l1 = 0.0, # lambda_l1 >= 0.0
lambda_l2 = 0.0, # lambda_l2 >= 0.0
max_bin = 31L, # lo debo dejar fijo, no participa de la BO
bagging_fraction = 1.0, # 0.0 < bagging_fraction <= 1.0
pos_bagging_fraction = 1.0, # 0.0 < pos_bagging_fraction <= 1.0
neg_bagging_fraction = 1.0, # 0.0 < neg_bagging_fraction <= 1.0
is_unbalance = FALSE, #
scale_pos_weight = 1.0, # scale_pos_weight > 0.0
drop_rate = 0.1, # 0.0 < neg_bagging_fraction <= 1.0
max_drop = 50, # <=0 means no limit
skip_drop = 0.5, # 0.0 <= skip_drop <= 1.0
extra_trees = TRUE, # Magic Sauce
seed = PARAM$finalmodel$semilla
)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
setwd("~/buckets/b1")
# cargo el dataset donde voy a entrenar
dataset <- fread(PARAM$input$dataset, stringsAsFactors = TRUE)
# para correr el Google Cloud
#   8 vCPU
#  64 GB memoria RAM
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("lightgbm")
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "KA8240_lag3"
PARAM$input$dataset <- "./datasets/competencia_02_fe_lag3.csv.gz"
# meses donde se entrena el modelo
#PARAM$input$training <- c(202012, 202101, 202102, 202103, 202104, 202105)
PARAM$input$training <- c(202010, 202011, 202012, 202101, 202102, 202103)
PARAM$input$future <- c(202107) # meses donde se aplica el modelo
PARAM$finalmodel$semilla <- 100005
# hiperparametros intencionalmente NO optimos
PARAM$finalmodel$optim$num_iterations <- 43
PARAM$finalmodel$optim$learning_rate <- 0.0256516833785425
PARAM$finalmodel$optim$feature_fraction <- 0.816242644574755
PARAM$finalmodel$optim$min_data_in_leaf <- 31379
PARAM$finalmodel$optim$num_leaves <- 433
# Hiperparametros FIJOS de  lightgbm
PARAM$finalmodel$lgb_basicos <- list(
boosting = "gbdt", # puede ir  dart  , ni pruebe random_forest
objective = "binary",
metric = "custom",
first_metric_only = TRUE,
boost_from_average = TRUE,
feature_pre_filter = FALSE,
force_row_wise = TRUE, # para reducir warnings
verbosity = -100,
max_depth = -1L, # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split = 0.0, # min_gain_to_split >= 0.0
min_sum_hessian_in_leaf = 0.001, #  min_sum_hessian_in_leaf >= 0.0
lambda_l1 = 0.0, # lambda_l1 >= 0.0
lambda_l2 = 0.0, # lambda_l2 >= 0.0
max_bin = 31L, # lo debo dejar fijo, no participa de la BO
bagging_fraction = 1.0, # 0.0 < bagging_fraction <= 1.0
pos_bagging_fraction = 1.0, # 0.0 < pos_bagging_fraction <= 1.0
neg_bagging_fraction = 1.0, # 0.0 < neg_bagging_fraction <= 1.0
is_unbalance = FALSE, #
scale_pos_weight = 1.0, # scale_pos_weight > 0.0
drop_rate = 0.1, # 0.0 < neg_bagging_fraction <= 1.0
max_drop = 50, # <=0 means no limit
skip_drop = 0.5, # 0.0 <= skip_drop <= 1.0
extra_trees = TRUE, # Magic Sauce
seed = PARAM$finalmodel$semilla
)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
#setwd("~/buckets/b1")
setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
# cargo el dataset donde voy a entrenar
dataset <- fread(PARAM$input$dataset, stringsAsFactors = TRUE)
# Catastrophe Analysis  -------------------------------------------------------
# deben ir cosas de este estilo
#   dataset[foto_mes == 202006, active_quarter := NA]
# Data Drifting
# por ahora, no hago nada
# Feature Engineering Historico  ----------------------------------------------
#   aqui deben calcularse los  lags y  lag_delta
#   Sin lags no hay paraiso ! corta la bocha
#   https://rdrr.io/cran/data.table/man/shift.html
#--------------------------------------
# paso la clase a binaria que tome valores {0,1}  enteros
# set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
# esta estrategia es MUY importante
dataset[, clase01 := ifelse(clase_ternaria %in% c("BAJA+2", "BAJA+1"), 1L, 0L)]
#--------------------------------------
# los campos que se van a utilizar
campos_buenos <- setdiff(colnames(dataset), c("clase_ternaria", "clase01"))
#--------------------------------------
# establezco donde entreno
dataset[, train := 0L]
dataset[foto_mes %in% PARAM$input$training, train := 1L]
#--------------------------------------
# creo las carpetas donde van los resultados
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
dir.create(paste0("./exp/", PARAM$experimento, "/"), showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd(paste0("./exp/", PARAM$experimento, "/"))
# dejo los datos en el formato que necesita LightGBM
dtrain <- lgb.Dataset(
data = data.matrix(dataset[train == 1L, campos_buenos, with = FALSE]),
label = dataset[train == 1L, clase01]
)
# genero el modelo
param_completo <- c(PARAM$finalmodel$lgb_basicos,
PARAM$finalmodel$optim)
modelo <- lgb.train(
data = dtrain,
param = param_completo,
)
#--------------------------------------
# ahora imprimo la importancia de variables
tb_importancia <- as.data.table(lgb.importance(modelo))
archivo_importancia <- "impo.txt"
fwrite(tb_importancia,
file = archivo_importancia,
sep = "\t"
)
#--------------------------------------
# aplico el modelo a los datos sin clase
dapply <- dataset[foto_mes == PARAM$input$future]
# aplico el modelo a los datos nuevos
prediccion <- predict(
modelo,
data.matrix(dapply[, campos_buenos, with = FALSE])
)
# genero la tabla de entrega
tb_entrega <- dapply[, list(numero_de_cliente, foto_mes)]
tb_entrega[, prob := prediccion]
# grabo las probabilidad del modelo
fwrite(tb_entrega,
file = "prediccion.txt",
sep = "\t"
)
# ordeno por probabilidad descendente
setorder(tb_entrega, -prob)
# genero archivos con los  "envios" mejores
# deben subirse "inteligentemente" a Kaggle para no malgastar submits
# si la palabra inteligentemente no le significa nada aun
# suba TODOS los archivos a Kaggle
# espera a la siguiente clase sincronica en donde el tema sera explicado
cortes <- seq(8000, 15000, by = 500)
for (envios in cortes) {
tb_entrega[, Predicted := 0L]
tb_entrega[1:envios, Predicted := 1L]
fwrite(tb_entrega[, list(numero_de_cliente, Predicted)],
file = paste0(PARAM$experimento, "_", envios, ".csv"),
sep = ","
)
}
cat("\n\nLa generacion de los archivos para Kaggle ha terminado\n")
# para correr el Google Cloud
#   8 vCPU
#  64 GB memoria RAM
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("lightgbm")
# defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM <- list()
PARAM$experimento <- "KA8240_lag3"
PARAM$input$dataset <- "./datasets/competencia_02_fe_lag3.csv.gz"
# meses donde se entrena el modelo
PARAM$input$training <- c(202012, 202101, 202102, 202103, 202104, 202105)
#PARAM$input$training <- c(202010, 202011, 202012, 202101, 202102, 202103)
PARAM$input$future <- c(202107) # meses donde se aplica el modelo
PARAM$finalmodel$semilla <- 100005
# hiperparametros intencionalmente NO optimos
PARAM$finalmodel$optim$num_iterations <- 43
PARAM$finalmodel$optim$learning_rate <- 0.0256516833785425
PARAM$finalmodel$optim$feature_fraction <- 0.816242644574755
PARAM$finalmodel$optim$min_data_in_leaf <- 31379
PARAM$finalmodel$optim$num_leaves <- 433
# Hiperparametros FIJOS de  lightgbm
PARAM$finalmodel$lgb_basicos <- list(
boosting = "gbdt", # puede ir  dart  , ni pruebe random_forest
objective = "binary",
metric = "custom",
first_metric_only = TRUE,
boost_from_average = TRUE,
feature_pre_filter = FALSE,
force_row_wise = TRUE, # para reducir warnings
verbosity = -100,
max_depth = -1L, # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split = 0.0, # min_gain_to_split >= 0.0
min_sum_hessian_in_leaf = 0.001, #  min_sum_hessian_in_leaf >= 0.0
lambda_l1 = 0.0, # lambda_l1 >= 0.0
lambda_l2 = 0.0, # lambda_l2 >= 0.0
max_bin = 31L, # lo debo dejar fijo, no participa de la BO
bagging_fraction = 1.0, # 0.0 < bagging_fraction <= 1.0
pos_bagging_fraction = 1.0, # 0.0 < pos_bagging_fraction <= 1.0
neg_bagging_fraction = 1.0, # 0.0 < neg_bagging_fraction <= 1.0
is_unbalance = FALSE, #
scale_pos_weight = 1.0, # scale_pos_weight > 0.0
drop_rate = 0.1, # 0.0 < neg_bagging_fraction <= 1.0
max_drop = 50, # <=0 means no limit
skip_drop = 0.5, # 0.0 <= skip_drop <= 1.0
extra_trees = TRUE, # Magic Sauce
seed = PARAM$finalmodel$semilla
)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui empieza el programa
#setwd("~/buckets/b1")
setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
# cargo el dataset donde voy a entrenar
dataset <- fread(PARAM$input$dataset, stringsAsFactors = TRUE)
# Catastrophe Analysis  -------------------------------------------------------
# deben ir cosas de este estilo
#   dataset[foto_mes == 202006, active_quarter := NA]
# Data Drifting
# por ahora, no hago nada
# Feature Engineering Historico  ----------------------------------------------
#   aqui deben calcularse los  lags y  lag_delta
#   Sin lags no hay paraiso ! corta la bocha
#   https://rdrr.io/cran/data.table/man/shift.html
#--------------------------------------
# paso la clase a binaria que tome valores {0,1}  enteros
# set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
# esta estrategia es MUY importante
dataset[, clase01 := ifelse(clase_ternaria %in% c("BAJA+2", "BAJA+1"), 1L, 0L)]
#--------------------------------------
# los campos que se van a utilizar
campos_buenos <- setdiff(colnames(dataset), c("clase_ternaria", "clase01"))
#--------------------------------------
# establezco donde entreno
dataset[, train := 0L]
dataset[foto_mes %in% PARAM$input$training, train := 1L]
#--------------------------------------
# creo las carpetas donde van los resultados
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
dir.create(paste0("./exp/", PARAM$experimento, "/"), showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd(paste0("./exp/", PARAM$experimento, "/"))
# dejo los datos en el formato que necesita LightGBM
dtrain <- lgb.Dataset(
data = data.matrix(dataset[train == 1L, campos_buenos, with = FALSE]),
label = dataset[train == 1L, clase01]
)
# genero el modelo
param_completo <- c(PARAM$finalmodel$lgb_basicos,
PARAM$finalmodel$optim)
modelo <- lgb.train(
data = dtrain,
param = param_completo,
)
#--------------------------------------
# ahora imprimo la importancia de variables
tb_importancia <- as.data.table(lgb.importance(modelo))
archivo_importancia <- "impo.txt"
fwrite(tb_importancia,
file = archivo_importancia,
sep = "\t"
)
#--------------------------------------
# aplico el modelo a los datos sin clase
dapply <- dataset[foto_mes == PARAM$input$future]
# aplico el modelo a los datos nuevos
prediccion <- predict(
modelo,
data.matrix(dapply[, campos_buenos, with = FALSE])
)
# genero la tabla de entrega
tb_entrega <- dapply[, list(numero_de_cliente, foto_mes)]
tb_entrega[, prob := prediccion]
# grabo las probabilidad del modelo
fwrite(tb_entrega,
file = "prediccion.txt",
sep = "\t"
)
# ordeno por probabilidad descendente
setorder(tb_entrega, -prob)
# genero archivos con los  "envios" mejores
# deben subirse "inteligentemente" a Kaggle para no malgastar submits
# si la palabra inteligentemente no le significa nada aun
# suba TODOS los archivos a Kaggle
# espera a la siguiente clase sincronica en donde el tema sera explicado
cortes <- seq(8000, 15000, by = 500)
for (envios in cortes) {
tb_entrega[, Predicted := 0L]
tb_entrega[1:envios, Predicted := 1L]
fwrite(tb_entrega[, list(numero_de_cliente, Predicted)],
file = paste0(PARAM$experimento, "_", envios, ".csv"),
sep = ","
)
}
cat("\n\nLa generacion de los archivos para Kaggle ha terminado\n")
