devtools::install_github("ManuelHentschel/vscDebugger")
install.packages('IRkernel')
quit()
dir.create("./exp/KA2001")
# Arbol elemental con libreria  rpart
# Debe tener instaladas las librerias  data.table  ,  rpart  y  rpart.plot
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
#setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
setwd("C:/Users/maico/iCloudDrive/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# Arbol elemental con libreria  rpart
# Debe tener instaladas las librerias  data.table  ,  rpart  y  rpart.plot
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
# Arbol elemental con libreria  rpart
# Debe tener instaladas las librerias  data.table  ,  rpart  y  rpart.plot
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
#setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
setwd("~/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("./datasets/competencia_01.csv")
dtrain <- dataset[foto_mes == 202103] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202105] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.5, # esto significa no limitar la complejidad de los splits
minsplit = 400, # minima cantidad de registros para que se haga el split
minbucket = 5, # tamaño minimo de una hoja
maxdepth = 6
) # profundidad maxima del arbol
# grafico el arbol
prp(modelo,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
)
# prediccion es una matriz con TRES columnas,
# llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
# solo le envio estimulo a los registros
#  con probabilidad de BAJA+2 mayor  a  1/40
dapply[, Predicted := as.numeric(prob_baja2 > 1 / 40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
View(prediccion)
View(dapply)
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
PARAM <- list()
# reemplazar por SU semilla
PARAM$semilla <- 100005
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#  que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar <- function(
data, division, agrupa = "",
campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui comienza el programa
# Aqui se debe poner la carpeta de la computadora local
# Establezco el Working Directory
setwd("C:/Users/maico/Documents/Mestrado/dmeyf2023") # Establezco el Working Directory
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
PARAM <- list()
# reemplazar por SU semilla
PARAM$semilla <- 100005
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#  que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar <- function(
data, division, agrupa = "",
campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui comienza el programa
# Aqui se debe poner la carpeta de la computadora local
# Establezco el Working Directory
setwd("~/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# cargo los datos
dataset <- fread("./datasets/competencia_01.csv")
# trabajo solo con los datos con clase, es decir 202103
dataset <- dataset[ foto_mes==202103 ]
# particiono estratificadamente el dataset
# Cambiar por la primer semilla de cada uno !
particionar(dataset, division = c(7, 3),
agrupa = "clase_ternaria", seed = PARAM$semilla) # aqui se usa SU semilla
param_basicos <- list(
"cp" = -1, # complejidad minima
"minsplit" = 400, # minima cantidad de regs en un nodo para hacer el split
"minbucket" = 10, # minima cantidad de regs en una hoja
"maxdepth" = 8 # profundidad máxima del arbol
)
# genero el modelo
# quiero predecir clase_ternaria a partir del resto
# fold==1  es training,  el 70% de los datos
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1],
xval = 0,
control = param_basicos # aqui van los parametros
)
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# agrego una columna que es la de las ganancias
dataset[, ganancia := ifelse(clase_ternaria == "BAJA+2", 273000, -7000)]
# para testing agrego la probabilidad
dataset[fold == 2, prob_baja2 := prediccion[, "BAJA+2"]]
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[fold == 2 & prob_baja2 > 0.025, sum(ganancia)]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
estimulos <- dataset[fold == 2 & prob_baja2 > 0.025, .N]
aciertos <- dataset[fold == 2 & prob_baja2 > 0.025 & clase_ternaria == "BAJA+2", .N]
cat("Testing total: ", dataset[fold == 2, .N], "\n")
cat("Testing BAJA+2: ", dataset[fold == 2 & clase_ternaria == "BAJA+2", .N], "\n")
cat("Estimulos: ", estimulos, "\n")
cat("Aciertos (BAJA+2): ", aciertos, "\n")
cat("Ganancia en testing (normalizada): ", ganancia_test_normalizada, "\n")
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
PARAM <- list()
# reemplazar por SU semilla
PARAM$semilla <- 100005
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#  que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar <- function(
data, division, agrupa = "",
campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui comienza el programa
# Aqui se debe poner la carpeta de la computadora local
# Establezco el Working Directory
setwd("~/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# cargo los datos
dataset <- fread("./datasets/competencia_01.csv")
# trabajo solo con los datos con clase, es decir 202103
dataset <- dataset[ foto_mes==202103 ]
# particiono estratificadamente el dataset
# Cambiar por la primer semilla de cada uno !
particionar(dataset, division = c(7, 3),
agrupa = "clase_ternaria", seed = PARAM$semilla) # aqui se usa SU semilla
param_basicos <- list(
"cp" = -0.5, # complejidad minima
"minsplit" = 400, # minima cantidad de regs en un nodo para hacer el split
"minbucket" = 10, # minima cantidad de regs en una hoja
"maxdepth" = 8 # profundidad máxima del arbol
)
# genero el modelo
# quiero predecir clase_ternaria a partir del resto
# fold==1  es training,  el 70% de los datos
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1],
xval = 0,
control = param_basicos # aqui van los parametros
)
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# agrego una columna que es la de las ganancias
dataset[, ganancia := ifelse(clase_ternaria == "BAJA+2", 273000, -7000)]
# para testing agrego la probabilidad
dataset[fold == 2, prob_baja2 := prediccion[, "BAJA+2"]]
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[fold == 2 & prob_baja2 > 0.025, sum(ganancia)]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
estimulos <- dataset[fold == 2 & prob_baja2 > 0.025, .N]
aciertos <- dataset[fold == 2 & prob_baja2 > 0.025 & clase_ternaria == "BAJA+2", .N]
cat("Testing total: ", dataset[fold == 2, .N], "\n")
cat("Testing BAJA+2: ", dataset[fold == 2 & clase_ternaria == "BAJA+2", .N], "\n")
cat("Estimulos: ", estimulos, "\n")
cat("Aciertos (BAJA+2): ", aciertos, "\n")
cat("Ganancia en testing (normalizada): ", ganancia_test_normalizada, "\n")
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100005, 200005, 300005, 400005, 500005)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 273000, -7000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("X:\\gdrive\\uba2023\\") # Establezco el Working Directory
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100005, 200005, 300005, 400005, 500005)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 273000, -7000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("~/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# cargo los datos
dataset <- fread("./datasets/competencia_01.csv")
# trabajo solo con los datos con clase, es decir 202103
dataset <- dataset[foto_mes==202103]
param_basicos <- list(
"cp" = -1, # complejidad minima
"minsplit" = 900, # minima cant de registros en un nodo para hacer el split
"minbucket" = 440, # minima cantidad de registros en una hoja
"maxdepth" = 5
) # profundidad máxima del arbol
# Un solo llamado, con la semilla 17
ArbolEstimarGanancia(17, param_basicos)
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
salidas <- mcmapply(ArbolEstimarGanancia,
PARAM$semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 1
) # se puede subir a 5 si posee Linux o Mac OS
# muestro la lista de las salidas en testing
#  para la particion realizada con cada semilla
salidas
# paso la lista a vector
tb_salida <- rbindlist(salidas)
tb_salida
# finalmente calculo la media (promedio)  de las ganancias
tb_salida[, mean(ganancia_test)]
# calculo todos los promedios
tb_salida[, lapply(.SD, mean)]
# desvio estandar Distribucion Binomial   sqrt( n * p * (1-p) )
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100005, 200005, 300005, 400005, 500005)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 273000, -7000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("~/Documents/Mestrado/2023-2/dmeyf2023") # Establezco el Working Directory
# cargo los datos
dataset <- fread("./datasets/competencia_01.csv")
# trabajo solo con los datos con clase, es decir 202103
dataset <- dataset[foto_mes==202103]
param_basicos <- list(
"cp" = -0.5, # complejidad minima
"minsplit" = 400, # minima cant de registros en un nodo para hacer el split
"minbucket" = 5, # minima cantidad de registros en una hoja
"maxdepth" = 6
) # profundidad máxima del arbol
# Un solo llamado, con la semilla 17
ArbolEstimarGanancia(17, param_basicos)
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
salidas <- mcmapply(ArbolEstimarGanancia,
PARAM$semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 1
) # se puede subir a 5 si posee Linux o Mac OS
# muestro la lista de las salidas en testing
#  para la particion realizada con cada semilla
salidas
# paso la lista a vector
tb_salida <- rbindlist(salidas)
tb_salida
# finalmente calculo la media (promedio)  de las ganancias
tb_salida[, mean(ganancia_test)]
# calculo todos los promedios
tb_salida[, lapply(.SD, mean)]
# desvio estandar Distribucion Binomial   sqrt( n * p * (1-p) )
